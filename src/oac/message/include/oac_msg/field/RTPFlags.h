// Generated by commsdsl2comms v5.0.1

/// @file
/// @brief Contains definition of <b>"RTPFlags"</b> field.

#pragma once

#include <cstdint>
#include <tuple>
#include "comms/field/Bitfield.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"
#include "oac_msg/field/FieldBase.h"
#include "oac_msg/field/RTPFlagsCommon.h"
#include "oac_msg/options/DefaultOptions.h"

namespace oac_msg
{

namespace field
{

/// @brief Scope for all the member fields of
///     @ref RTPFlags field.
/// @tparam TOpt Protocol options.
template <typename TOpt = oac_msg::options::DefaultOptions>
struct RTPFlagsMembers
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            oac_msg::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::FixedBitLength<2U>,
            comms::option::def::DefaultNumValue<2>
        >
    {
        using Base =
            comms::field::IntValue<
                oac_msg::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FixedBitLength<2U>,
                comms::option::def::DefaultNumValue<2>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return oac_msg::field::RTPFlagsMembersCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return oac_msg::field::RTPFlagsMembersCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"padding"</b> field.
    class Padding : public
        comms::field::IntValue<
            oac_msg::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::FixedBitLength<1U>
        >
    {
        using Base =
            comms::field::IntValue<
                oac_msg::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FixedBitLength<1U>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return oac_msg::field::RTPFlagsMembersCommon::PaddingCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return oac_msg::field::RTPFlagsMembersCommon::PaddingCommon::name();
        }
    };

    /// @brief Definition of <b>"extension"</b> field.
    class Extension : public
        comms::field::IntValue<
            oac_msg::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::FixedBitLength<1U>
        >
    {
        using Base =
            comms::field::IntValue<
                oac_msg::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FixedBitLength<1U>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return oac_msg::field::RTPFlagsMembersCommon::ExtensionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return oac_msg::field::RTPFlagsMembersCommon::ExtensionCommon::name();
        }
    };

    /// @brief Definition of <b>"csrc_count"</b> field.
    class Csrc_count : public
        comms::field::IntValue<
            oac_msg::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::FixedBitLength<4U>
        >
    {
        using Base =
            comms::field::IntValue<
                oac_msg::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FixedBitLength<4U>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return oac_msg::field::RTPFlagsMembersCommon::Csrc_countCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return oac_msg::field::RTPFlagsMembersCommon::Csrc_countCommon::name();
        }
    };

    /// @brief Definition of <b>"marker"</b> field.
    class Marker : public
        comms::field::IntValue<
            oac_msg::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::FixedBitLength<1U>
        >
    {
        using Base =
            comms::field::IntValue<
                oac_msg::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FixedBitLength<1U>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return oac_msg::field::RTPFlagsMembersCommon::MarkerCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return oac_msg::field::RTPFlagsMembersCommon::MarkerCommon::name();
        }
    };

    /// @brief Definition of <b>"payload_type"</b> field.
    /// @see @ref oac_msg::field::RTPFlagsMembersCommon::Payload_typeCommon::ValueType
    class Payload_type : public
        comms::field::EnumValue<
            oac_msg::field::FieldBase<>,
            oac_msg::field::RTPFlagsMembersCommon::Payload_typeCommon::ValueType,
            comms::option::def::FixedBitLength<7U>,
            comms::option::def::ValidNumValue<0>,
            comms::option::def::ValidNumValueRange<3, 18>,
            comms::option::def::ValidNumValueRange<25, 26>,
            comms::option::def::ValidNumValue<28>,
            comms::option::def::ValidNumValueRange<31, 34>
        >
    {
        using Base =
            comms::field::EnumValue<
                oac_msg::field::FieldBase<>,
                oac_msg::field::RTPFlagsMembersCommon::Payload_typeCommon::ValueType,
                comms::option::def::FixedBitLength<7U>,
                comms::option::def::ValidNumValue<0>,
                comms::option::def::ValidNumValueRange<3, 18>,
                comms::option::def::ValidNumValueRange<25, 26>,
                comms::option::def::ValidNumValue<28>,
                comms::option::def::ValidNumValueRange<31, 34>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Single value name info entry.
        using ValueNameInfo = oac_msg::field::RTPFlagsMembersCommon::Payload_typeCommon::ValueNameInfo;

        /// @brief Type returned from @ref valueNamesMap() member function.
        /// @see @ref oac_msg::field::RTPFlagsMembersCommon::Payload_typeCommon::ValueNamesMapInfo.
        using ValueNamesMapInfo = oac_msg::field::RTPFlagsMembersCommon::Payload_typeCommon::ValueNamesMapInfo;

        /// @brief Retrieve name of the enum value.
        /// @see @ref oac_msg::field::RTPFlagsMembersCommon::Payload_typeCommon::valueName().
        static const char* valueName(ValueType val)
        {
            return oac_msg::field::RTPFlagsMembersCommon::Payload_typeCommon::valueName(val);
        }

        /// @brief Retrieve name of the @b current value
        const char* valueName() const
        {
            return valueName(Base::getValue());
        }

        /// @brief Retrieve map of enum value names.
        /// @see @ref oac_msg::field::RTPFlagsMembersCommon::Payload_typeCommon::valueNamesMap().
        static ValueNamesMapInfo valueNamesMap()
        {
            return oac_msg::field::RTPFlagsMembersCommon::Payload_typeCommon::valueNamesMap();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return oac_msg::field::RTPFlagsMembersCommon::Payload_typeCommon::name();
        }
    };

    /// @brief All members bundled in @b std::tuple.
    using All =
        std::tuple<
           Version,
           Padding,
           Extension,
           Csrc_count,
           Marker,
           Payload_type
        >;
};

/// @brief Definition of <b>"RTPFlags"</b> field.
/// @tparam TOpt Protocol options.
/// @tparam TExtraOpts Extra options.
template <typename TOpt = oac_msg::options::DefaultOptions, typename... TExtraOpts>
class RTPFlags : public
    comms::field::Bitfield<
        oac_msg::field::FieldBase<>,
        typename RTPFlagsMembers<TOpt>::All,
        TExtraOpts...
    >
{
    using Base =
        comms::field::Bitfield<
            oac_msg::field::FieldBase<>,
            typename RTPFlagsMembers<TOpt>::All,
            TExtraOpts...
        >;
public:
    /// @brief Allow access to internal fields.
    /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
    ///     related to @b comms::field::Bitfield class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and access functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access function -
    ///         for oac_msg::field::RTPFlagsMembers::Version member field.
    ///     @li @b FieldIdx_padding index, @b Field_padding type and @b field_padding() access function -
    ///         for oac_msg::field::RTPFlagsMembers::Padding member field.
    ///     @li @b FieldIdx_extension index, @b Field_extension type and @b field_extension() access function -
    ///         for oac_msg::field::RTPFlagsMembers::Extension member field.
    ///     @li @b FieldIdx_csrc_count index, @b Field_csrc_count type and @b field_csrc_count() access function -
    ///         for oac_msg::field::RTPFlagsMembers::Csrc_count member field.
    ///     @li @b FieldIdx_marker index, @b Field_marker type and @b field_marker() access function -
    ///         for oac_msg::field::RTPFlagsMembers::Marker member field.
    ///     @li @b FieldIdx_payload_type index, @b Field_payload_type type and @b field_payload_type() access function -
    ///         for oac_msg::field::RTPFlagsMembers::Payload_type member field.
    COMMS_FIELD_MEMBERS_NAMES(
        version,
        padding,
        extension,
        csrc_count,
        marker,
        payload_type
    );

    /// @brief Name of the field.
    static const char* name()
    {
        return oac_msg::field::RTPFlagsCommon::name();
    }
};

} // namespace field

} // namespace oac_msg
