// Generated by commsdsl2comms v5.0.1

/// @file
/// @brief Contains definition of <b>"RTPMessage"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"
#include "oac_msg/MsgId.h"
#include "oac_msg/field/FieldBase.h"
#include "oac_msg/field/RTPHeader.h"
#include "oac_msg/message/RTPMessageCommon.h"
#include "oac_msg/options/DefaultOptions.h"

namespace oac_msg
{

namespace message
{

/// @brief Fields of @ref RTPMessage.
/// @tparam TOpt Extra options
/// @see @ref RTPMessage
/// @headerfile oac_msg/message/RTPMessage.h
template <typename TOpt = oac_msg::options::DefaultOptions>
struct RTPMessageFields
{
    /// @brief Definition of <b>"header"</b> field.
    class Header : public
        oac_msg::field::RTPHeader<
            TOpt
        >
    {
        using Base =
            oac_msg::field::RTPHeader<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return oac_msg::message::RTPMessageFieldsCommon::HeaderCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Content field.
    struct ContentMembers
    {
        /// @brief Definition of <b>"element"</b> field.
        class Element : public
            comms::field::IntValue<
                oac_msg::field::FieldBase<>,
                std::int16_t
            >
        {
            using Base =
                comms::field::IntValue<
                    oac_msg::field::FieldBase<>,
                    std::int16_t
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return oac_msg::message::RTPMessageFieldsCommon::ContentMembersCommon::ElementCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return oac_msg::message::RTPMessageFieldsCommon::ContentMembersCommon::ElementCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"content"</b> field.
    class Content : public
        comms::field::ArrayList<
            oac_msg::field::FieldBase<>,
            typename ContentMembers::Element,
            typename TOpt::message::RTPMessageFields::Content
        >
    {
        using Base =
            comms::field::ArrayList<
                oac_msg::field::FieldBase<>,
                typename ContentMembers::Element,
                typename TOpt::message::RTPMessageFields::Content
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return oac_msg::message::RTPMessageFieldsCommon::ContentCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Header,
        Content
    >;
};

/// @brief Definition of <b>"RTPMessage"</b> message class.
/// @details
///     See @ref RTPMessageFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile oac_msg/message/RTPMessage.h
template <typename TMsgBase, typename TOpt = oac_msg::options::DefaultOptions>
class RTPMessage : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<oac_msg::MsgId_RTPMessage>,
        comms::option::def::FieldsImpl<typename RTPMessageFields<TOpt>::All>,
        comms::option::def::MsgType<RTPMessage<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<oac_msg::MsgId_RTPMessage>,
            comms::option::def::FieldsImpl<typename RTPMessageFields<TOpt>::All>,
            comms::option::def::MsgType<RTPMessage<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_header index, @b Field_header type and @b field_header() access fuction
    ///         for @ref RTPMessageFields::Header field.
    ///     @li @b FieldIdx_content index, @b Field_content type and @b field_content() access fuction
    ///         for @ref RTPMessageFields::Content field.
    COMMS_MSG_FIELDS_NAMES(
        header,
        content
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 12U, "Unexpected min serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return oac_msg::message::RTPMessageCommon::name();
    }
};

} // namespace message

} // namespace oac_msg
